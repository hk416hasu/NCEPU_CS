-- generated by hk416hasu
library IEEE;
use ieee.std_logic_unsigned.all;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity storage is
	Port ( 
		CLK       : in STD_LOGIC; -- 时钟信号，切换状态机
		RST       : in STD_LOGIC; -- 复位信号，切换至初始状态机
		INPUT     : in STD_LOGIC_VECTOR (15 downto 0); -- 拨码开关输入数据
		OUTPUT    : out STD_LOGIC_VECTOR(15 downto 0); -- LED输出数据
		stateCnt1 : out STD_LOGIC_VECTOR(6  downto 0); -- 状态机信息, 输出至7段数码管
		stateCnt2 : out STD_LOGIC_VECTOR(6  downto 0); -- 状态机信息, 输出至7段数码管
		M_EN      : out STD_LOGIC; -- Memory_Enable
		M_OE      : out STD_LOGIC; -- Memory_Output_Enable
		M_WE      : out STD_LOGIC; -- Memory_Write_Enable
		Addr      : out   STD_LOGIC_VECTOR(17 downto 0); -- 地址信号, 输出至内存
		Data      : inout STD_LOGIC_VECTOR(15 downto 0)  -- Data信号, 可以输出至内存, 也可以从内存读取
	);
end entity storage;

architecture bhv of storage is

	signal a     : std_logic_vector(15 downto 0); -- Addr tmp
	signal d     : std_logic_vector(15 downto 0); -- Data tmp
	signal op    : std_logic; -- select Read or Write / Change State Machine
	signal Wstat : integer range 0 to 3; -- Write State
	signal Rstat : integer range 0 to 2; -- Read  State

begin

	M_EN <= '0'; -- 内存使能

process(RST, CLK) -- 注意同一个信号不允许在多个进程中赋值
begin
	if RST = '0' then -- 各种各样的初始化
		a <= (others=>'0'); d <= (others=>'0'); OUTPUT <= (others=>'0');
		stateCnt1 <= (others=>'1'); stateCnt2 <= (others=>'1');
		Wstat <= 0; Rstat <= 0;
		M_WE  <= '1';  -- 先不允许写
		op    <= '0';  -- 默认先写入内存
	elsif CLK'event and CLK = '1' then
		-- instructions:
		-- if 88 then input addr
		-- if 00 then input data
		-- if 01 or 10 then do nothing
		-- if 02 or 11 then input new op
		-- if 03 or 12 then input addr
		
		OUTPUT <= (others=>'0'); -- clear OUTPUT
		
		if op = '0' then -- Write
			M_OE <= '1'; -- 写入时不输出
			stateCnt1 <= "0111111";
			case Wstat is
				when 0 => stateCnt2 <= "0111111";
					Wstat <= 1; 
					a     <= input;
				when 1 => stateCnt2 <= "0000110";
					Wstat <= 2; 
					d     <= input;
				when 2 => stateCnt2 <= "1011011"; -- data 和 addr 送往
					Wstat <= 3; 
					M_WE  <= '0'; -- 允许写
					Data  <= d;
					Addr  <= "00" & a;
				when 3 => stateCnt2 <= "1001111";
					Wstat <= 0; 
					M_WE  <= '1'; -- 不允许写了
					op    <= input(0);
				when others => NULL;
			end case;
			
		elsif op = '1' then -- Read
			M_OE <= '0'; -- 允许输出
			stateCnt1 <= "0000110";
			case Rstat is
				when 0 => stateCnt2 <= "0111111";
					Rstat  <= 1;
					a      <= input;
				when 1 => stateCnt2 <= "0000110";
					Rstat  <= 2;
					Addr   <= "00" & a;
					Data   <= (others=>'Z'); -- 将Data设置为高阻态, 以接收数据
				when 2 => StateCnt2 <= "1011011";
					Rstat  <= 0;
					OUTPUT <= data;
					op     <= input(0);
				when others => NULL;	
			end case;
			
		end if; -- end op
	end if; -- end RST & CLK
end process;

end bhv;